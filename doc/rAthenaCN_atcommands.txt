//===== rAthenaCN 文檔 =======================================
//= rAthenaCN GM指令說明文件
//===== 作者: ================================================
//= rAthenaCN 開發團隊
//===== 最後更新: ============================================
//= 20170117
//===== 文檔簡介: ============================================
//= rAthenaCN 是基於 rAthena 進行二次開發的, 在 rAthena 官方支
//= 持的GM指令基礎上, rAthenaCN 也拓展了一些GM指令, 請參閱下面
//= 的說明, 它會重點介紹指令的參數和用法.
//============================================================

---------------------------------------

@eventrpt

用來查詢服務器中各種腳本事件的調用次數和執行耗時, 以便腳本管理員調試自己的腳本性能.

使用場景:
	例如現在服務器發現過圖之後要卡一下玩家才能移動, 排除了可能是網絡原因外, 現在懷疑可能是腳本編寫的有問題, 導致一些事件的執行事件過長. 

使用方法:
	輸入指令後, 服務端將返回以下信息:

	========================================================================================
	事件名稱                    次數        總耗時(ms)        平均耗時(ms)      最高單次耗時
	========================================================================================
	OnProgressbarAbortEvent     1           0                 0.00              0
	OnPCLoginEvent              3           9820              2413.00           3552.00
	========================================================================================
	目前共有 2 個事件被觸發, 共觸發 4 次, 處理事件累積總耗時: 9820 毫秒

	從上面的信息中可以看到 OnPCLoginEvent 事件的處理耗時太長了, 這應該就是導致出現玩家過圖後會卡一下的元兇.

注意:
	- 此處記錄的是地圖服務器啟動之後所有玩家觸發到的所有事件, 而不僅僅是當前登錄玩家執行過的事件.
	- 執行一個大量的 for 循環, 或類似 query_sql 這些會導致玩家卡住不動的指令和操作才會增加耗時
	- 耗時為 0 說明這個事件的處理代碼效率很高, 這說明你的腳本效率很高
	- 耗時統計從事件被觸發開始, 到第一個會導致腳本暫停的指令/事件處理代碼執行完畢截止

會導致腳本暫停的指令:
	主要是 sleep、sleep2、next、close2、menu、select、prompt、input、progressbar, 他們的特點是執行這些指令時, 都需要等待客戶端/玩家返回一定的信息或做出選擇才能繼續往下執行.

舉個例子:
	-	script	OnPCLoginEvent	-1,{
	end;
	OnPCLoginEvent:
		// 進入此事件處理代碼時, 地圖服務器會記錄事件處理的起始時間
		
		if (BaseLevel > 99) {
			announce "歡迎老玩家上線...",BC_ALL;
		}
		
		sleep2 100;		// 如果你加上了這一句, 那麼耗時統計到此就結束了
		freeloop(1);
		for (.@i = 0; .@i < 5000; .@i++) {
			dispbottom "我是很耗時的循環操作, 這是我第 " + .@i + " 次執行";
		}
	end;
	}

	上面的例子執行後, 會發現他的耗時為 0, 看起來好像 OnPCLoginEvent 的執行效率很高, 但是實際上下面還有一個大量 for 循環卡著.
	在這種情況下, 耗時統計是不正確的, 一定要注意. 如果去掉 sleep2 這一行代碼, 就能看見此事件處理代碼很耗時了.

---------------------------------------
	
@reloadnpc <NPC文件路徑>

用來刷新單個 NPC 腳本文件, 以便提高腳本開發者的開發效率.

此功能最早由 rAthenaCN 開發, 當時的指令名字為 @refreshnpc (現已廢棄),
現在 rAthena 官方實現了類似功能, 指令名字變更為 @reloadnpcfile (指令的別名為 @reloadnpc) 

我們知道 NPC 腳本文件可以很獨立(他裡面可能只有一個 NPC), 
也有可能很複雜(裡面有各種 function 和 NPC, 此外還附帶著調用其他腳本文件的 function, 
又或者裡面有 function 被其他的腳本文件調用).

正因為這種關聯特性, 所以處理起來效果就比較有限, 詳見下面的注意事項.

關於路徑: 
	NPC文件路徑應該用正斜槓(/), 而不是反斜槓(\), 例如應該寫成 npc/kafras/kafras.txt 而不是 npc\kafras\kafras.txt

注意事項:
	- 此指令只能將指定腳本文件中的 script 和 function 代碼塊卸載後重新讀取.
	- 如果要刷新的腳本中有 mapflag 或者 monster 刷怪指令等, 那麼這些 mapflag 定義和 monster 刷怪指令將不會被刷新.

---------------------------------------
	
@policy <行為策略編號>

用來切換賬號的行為策略編號, 具體請見行為策略系統的說明.

---------------------------------------

@title <稱號ID>

此功能僅限 2015 客戶端可用, 可以用來修改玩家的稱號.
稱號ID可以在客戶端資源文件 data/luafiles514/lua files/datainfo/titletable.lub 裡面查到, 若設為 0 則取消稱號.

注意:
	- 稱號功能在官服隸屬於成就系統, 但是現在成就系統功能還沒實裝.
	- 從 rAthenaCN v1.7.0 開始, 使用該指令設置的稱號會被保存到數據庫

---------------------------------------

@recallmap

召喚當前地圖的玩家到你身邊過來.

---------------------------------------

@reloadloginconf

該指令只有啟用了VIP會員系統才能使用, 讓地圖服務器能夠重新讀取「登陸服務器的配置文件」.
這聽起來很奇怪, 實際上是因為地圖服務器需要依賴 conf/login_athena.conf 的 vip_group 選項來獲取 VIP 玩家的 group 編號.

地圖服務器獲取這個 vip_group 是為了當 GM 使用 @vip 指令試圖讓自己成為 VIP, 
或使用 vip_time 腳本指令試圖修改 GM 賬號的 VIP 時間的時候, 能夠給予友好的錯誤提示.

---------------------------------------

@reloadmannerdb

用來重新載入「聊天內容敏感詞庫」的指令, 對應的數據文件為 conf/manner.txt

---------------------------------------

@reloadpolicies

用來重新載入「賬號行為策略數據庫」的指令, 對應的數據文件為 conf/policies.conf

---------------------------------------
